apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mop.fullname" . }}
  labels:
{{ include "mop.labels" . | indent 4 }}
    app.kubernetes.io/component: "backend"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mop.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "backend"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mop.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: "backend"
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "mop.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      initContainers:
        # wait for database to become ready
        - name: check-db-ready
          image: "postgres:11.2-alpine"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - >
              until pg_isready \
                  --username={{ .Values.postgresql.postgresqlUsername | quote }} \
                  --dbname={{ .Values.postgresql.postgresqlDatabase | quote }} \
                  --host={{ include "mop.dbhost" . | quote }} \
                  --port={{ .Values.postgresql.service.port | quote }};
                do echo waiting for database;
                sleep 2;
                done;
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            requests:
              cpu: 50m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 16Mi
        {{- if .Values.applyDatabaseMigrations }}
        - name: apply-db-migrations
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - python
            - manage.py
            - migrate
            - --no-input
          env:
            {{- include "mop.backendEnv" . | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: specutils
              mountPath: /.specutils
              readOnly: false
            - name: astropy
              mountPath: /.astropy
              readonly: false
        {{- end }}
        - name: django-collectstatic
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - python
            - manage.py
            - collectstatic
            - --no-input
          env:
            {{- include "mop.backendEnv" . | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: specutils
              mountPath: /.specutils
              readOnly: false
            - name: astropy
              mountPath: /.astropy
              readonly: false
            - name: static
              mountPath: /static
              readOnly: false

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - gunicorn
            - --bind=0.0.0.0:8080
            - --worker-class=gevent
            - --workers={{ .Values.gunicornWorkers | default 2 }}
            - --timeout={{ .Values.gunicornTimeout | default 300 }}
            - --access-logfile=-
            - --error-logfile=-
            - mop.wsgi
          env:
            {{- include "mop.backendEnv" . | nindent 12 }}
          ports:
            - name: gunicorn
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /{{ .Values.ingress.basePath }}
              port: gunicorn
          readinessProbe:
            httpGet:
              path: /{{ .Values.ingress.basePath }}
              port: gunicorn
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: static
              mountPath: /static
              readOnly: true

        - name: nginx
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 15
            timeoutSeconds: 3
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            initialDelaySeconds: 15
            timeoutSeconds: 3
            httpGet:
              path: /healthz
              port: http
          securityContext:
            {{- toYaml .Values.nginx.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
          volumeMounts:
            - name: nginx-confd
              mountPath: /etc/nginx/conf.d
              readOnly: true
            - name: static
              mountPath: /static
              readOnly: true
            - name: nginx-var-cache-nginx
              mountPath: /var/cache/nginx
              readOnly: false
            - name: nginx-var-run
              mountPath: /var/run
              readOnly: false

      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: specutils
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: astropy
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: static
          emptyDir:
            sizeLimit: 512Mi
        - name: nginx-confd
          configMap:
            name: {{ include "mop.fullname" . }}
        - name: nginx-var-cache-nginx
          emptyDir:
        - name: nginx-var-run
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi


      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
